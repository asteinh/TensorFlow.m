version: 2.1

defaults: &defaults
  working_directory: ~/project/
  shell: /bin/bash
  environment:
    - LIBTENSORFLOW_URL: https://storage.googleapis.com/tensorflow/libtensorflow/libtensorflow-cpu-linux-x86_64-1.15.0.tar.gz

executors:
  build_env:
    <<: *defaults
    docker:
      - image: asteinh/docker:tensorflowm-ci
  octave4_env:
    <<: *defaults
    docker:
      - image: asteinh/docker:tensorflowm-octave4-base
  octave5_env:
    <<: *defaults
    docker:
      - image: asteinh/docker:tensorflowm-octave5-base

orbs:
  codecov: codecov/codecov@1.0.5

################################################################################
# COMMANDS
################################################################################
commands:
  prepare_libraries:
    parameters:
      dest:
        description: relative path, where to store libraries
        type: string
      url:
        description: url of the TensorFlow libraries
        type: string
    steps:
      - run:
          name: Prepare TensorFlow libraries
          command: |
            export FILE=$(echo << parameters.url >> | awk -F '/' '{print $NF}')
            export FOLDER=${FILE%.tar.gz}
            export DEST=<< parameters.dest >>/$FOLDER
            curl << parameters.url >> -o /tmp/$FILE
            mkdir -p $DEST && tar -xzf /tmp/$FILE -C $DEST
            rm /tmp/$FILE

################################################################################
# JOBS
################################################################################
jobs:

  # prepare unit test environment
  prepare_tests:
    executor: build_env
    steps:
      - checkout
      - prepare_libraries:
          dest: tensorflow/mex/third_party
          url: $LIBTENSORFLOW_URL
      - run:
          name: Set up unit tests
          command: cd tests && ./setup_unittests.sh
      - persist_to_workspace:
          root: ~/
          paths:
            - project/

  # run unit tests
  run_tests:
    parameters:
      executor:
        type: executor
        default: octave5_env
      with_coverage:
        type: boolean
        default: false
    executor: << parameters.executor >>
    steps:
      - checkout
      - attach_workspace:
          at: ~/
      - run:
          name: Setup
          command: octave-cli --eval "setup();"
      - when:
          condition: << parameters.with_coverage >>
          steps:
            - run:
                name: Unit tests + coverage
                command: cd tests && octave-cli --eval "s = run_unittests('--with-coverage'); exit(s);"
      - unless:
          condition: << parameters.with_coverage >>
          steps:
            - run:
                name: Unit tests
                command: cd tests && octave-cli --eval "s = run_unittests(); exit(s);"
      - persist_to_workspace:
          root: ~/project/
          paths:
            - tests/results/

  # upload coverage report
  coverage:
    executor: build_env
    steps:
      - attach_workspace:
          at: ~/project/
      - codecov/upload:
          file: tests/results/coverage.xml
          flags: unittests

  # build documentation with sphinx
  build_docs:
    executor: build_env
    steps:
      - checkout
      - run:
          name: Make HTML
          command: cd docs && make html
      - persist_to_workspace:
          root: ~/project/
          paths:
            - docs/build/html

  # deploy documentation to github pages
  deploy_docs:
    executor: build_env
    steps:
      - add_ssh_keys:
          fingerprints:
            - "fb:e4:cf:7b:a9:c3:73:e1:a1:bf:bd:31:52:9f:5c:f0"
      - checkout
      - attach_workspace:
          at: ~/project/
      - run:
          name: gh-pages
          command: gh-pages --dotfiles --message "Update pages" --dist docs/build/html

# DEPLOY jobs
  # build a Docker image based on Octave 5 with TensorFlow libraries and tensorflow.m set up
  build_image:
    executor: build_env
    steps:
      - checkout
      - setup_remote_docker
      - prepare_libraries:
          dest: tensorflow/mex/third_party
          url: $LIBTENSORFLOW_URL
      - run:
          name: docker build
          command: |
            export SHORT_SHA1=${CIRCLE_SHA1:0:7}
            cp .circleci/Dockerfiles/Dockerfile.deploy Dockerfile
            docker build -t $SHORT_SHA1 .
      - run:
          name: docker save
          command: |
            export SHORT_SHA1=${CIRCLE_SHA1:0:7}
            mkdir -p ../images
            docker save $SHORT_SHA1 | gzip > ../images/$SHORT_SHA1.tar.gz
      - persist_to_workspace:
          root: ~/
          paths:
            - images/

  # run unit tests in built image
  test_image:
    executor: build_env
    steps:
      - setup_remote_docker
      - attach_workspace:
          at: ~/
      - run:
          name: docker load
          command: |
            export SHORT_SHA1=${CIRCLE_SHA1:0:7}
            docker load --input ../images/$SHORT_SHA1.tar
      - run:
          name: docker run
          command: |
            export SHORT_SHA1=${CIRCLE_SHA1:0:7}
            docker run --rm $SHORT_SHA1 /bin/bash -c \
              "cd tests && ./setup_unittests.sh && octave-cli --eval \"s = run_unittests(); exit(s);\""

  # deploy image to github packages
  deploy_image:
    executor: build_env
    steps:
      - add_ssh_keys:
          fingerprints:
            - "fb:e4:cf:7b:a9:c3:73:e1:a1:bf:bd:31:52:9f:5c:f0"
      - attach_workspace:
          at: ~/
      - run:
          name: deploy
          command: |
            export SHORT_SHA1=${CIRCLE_SHA1:0:7}
            export IMAGEID=$(docker images -q $SHORT_SHA1)
            echo $IMAGEID
            # docker login -u $GITHUB_USER -p $GITHUB_TOKEN docker.pkg.github.com
            docker login docker.pkg.github.com --username asteinh
            # docker tag $IMAGEID docker.pkg.github.com/asteinh/tensorflow.m/IMAGE_NAME:VERSION
            # docker push docker.pkg.github.com/asteinh/tensorflow.m/IMAGE_NAME:VERSION

################################################################################
# WORKFLOWS
################################################################################

# filters for workflows
develop: &develop_filter
  filters:
    branches:
      ignore:
        - master
        - gh-pages
master: &master_filter
  filters:
    branches:
      only: master
deploy: &deploy_filter
  filters:
    tags:
      only: /^v.*/
    branches:
      ignore: /.*/

workflows:
  version: 2

  # development workflow - run unit tests and build docs
  develop:
    jobs:
      - prepare_tests:
          <<: *develop_filter
      - run_tests:
          <<: *develop_filter
          executor: octave4_env
          name: tests_octave4
          requires:
            - prepare_tests
      - run_tests:
          <<: *develop_filter
          executor: octave5_env
          name: tests_octave5
          requires:
            - prepare_tests
      - build_docs:
          <<: *develop_filter

  # master workflow - run unit tests, coverage, build and deploy docs
  master:
    jobs:
      - prepare_tests:
          <<: *master_filter
      - run_tests:
          <<: *master_filter
          executor: octave4_env
          name: tests_octave4
          requires:
            - prepare_tests
      - run_tests:
          <<: *master_filter
          executor: octave5_env
          name: tests_octave5
          with_coverage: true
          requires:
            - prepare_tests
      - coverage:
          <<: *master_filter
          requires:
            - tests_octave5
      - build_docs:
          <<: *master_filter
      - deploy_docs:
          <<: *master_filter
          requires: # deploy iff tests and building succeeds
            - tests_octave4
            - tests_octave5
            - build_docs

  # release workflow - build Docker image, run unit tests in container and deploy image
  deploy:
    jobs:
      - build_image:
          <<: *develop_filter
      - test_image:
          <<: *develop_filter
          requires:
            - build_image
      - deploy_image:
          <<: *develop_filter
          requires:
            - test_image
