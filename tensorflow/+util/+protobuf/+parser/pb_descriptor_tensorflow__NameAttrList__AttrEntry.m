function [descriptor] = pb_descriptor_tensorflow__NameAttrList__AttrEntry()
%pb_descriptor_tensorflow__NameAttrList__AttrEntry Returns the descriptor for message AttrEntry.
%   function [descriptor] = pb_descriptor_tensorflow__NameAttrList__AttrEntry()
%
%   See also pb_read_tensorflow__NameAttrList__AttrEntry

  descriptor = struct( ...
    'name', 'AttrEntry', ...
    'full_name', 'tensorflow.NameAttrList.AttrEntry', ...
    'filename', 'tensorflow/core/framework/attr_value.proto', ...
    'containing_type', 'tensorflow.NameAttrList', ...
    'fields', [ ...
      struct( ...
        'name', 'key', ...
        'full_name', 'tensorflow.NameAttrList.AttrEntry.key', ...
        'index', 1, ...
        'number', uint32(1), ...
        'type', uint32(9), ...
        'matlab_type', uint32(7), ...
        'wire_type', uint32(2), ...
        'label', uint32(1), ...
        'default_value', '', ...
        'read_function', @(x) char(x{1}(x{2} : x{3})), ...
        'write_function', @uint8, ...
        'options', struct('packed', false) ...
      ), ...
      struct( ...
        'name', 'value', ...
        'full_name', 'tensorflow.NameAttrList.AttrEntry.value', ...
        'index', 2, ...
        'number', uint32(2), ...
        'type', uint32(11), ...
        'matlab_type', uint32(9), ...
        'wire_type', uint32(2), ...
        'label', uint32(1), ...
        'default_value', struct([]), ...
        'read_function', @(x) pb_read_tensorflow__AttrValue(x{1}, x{2}, x{3}), ...
        'write_function', @(x) util.protobuf.lib.pblib_generic_serialize_to_string(x), ...
        'options', struct('packed', false) ...
      ) ...
    ], ...
    'extensions', [ ... % Not Implemented
    ], ...
    'nested_types', [ ... % Not implemented
    ], ...
    'enum_types', [ ... % Not Implemented
    ], ...
    'options', [ ... % Not Implemented
    ] ...
  );

  descriptor.field_indeces_by_number = javaObject('java.util.HashMap');
  javaMethod('put', descriptor.field_indeces_by_number, uint32(1), 1);
  javaMethod('put', descriptor.field_indeces_by_number, uint32(2), 2);
